service.name= auth-service
server.port=8085

spring.data.mongodb.database=product_service

logging.level.org.springframework=DEBUG

# For a local Redis instance
spring.data.redis.host=localhost
spring.data.redis.port=6379



# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0
management.otlp.tracing.endpoint=http://localhost:9411/api/v2/spans
management.endpoints.web.exposure.include=prometheus

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

eureka.instance.preferIpAddress= true
eureka.client.registerWithEureka= true
eureka.client.fetchRegistry= true
eureka.client.serviceUrl.defaultZone= http://localhost:8761/eureka

spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id= 1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.apache.kafka.common.serialization.StringSerializer

        
zipkin.baseUrl: http://localhost:9411

management.endpoints.web.exposure.include= health, metrics, prometheus
management.metrics.tags.application=${spring.application.name} 